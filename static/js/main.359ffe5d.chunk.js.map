{"version":3,"sources":["store/actions/index.js","components/Layout/styleds.js","components/Common/index.js","components/Ticker/styleds.js","components/Ticker/index.js","components/Controls/styleds.js","components/Controls/index.js","components/Layout/index.js","utils/storeSaving.js","App.js","store/reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["apiUrl","process","refreshAllTickers","dispatch","getState","symbolsList","symbols","join","length","axios","url","concat","method","then","response","data","type","payload","catch","error","LayoutMain","styled","div","_templateObject","LayoutTickers","_templateObject2","RefreshIndicator","_templateObject3","props","refreshInterval","Button","button","Common_templateObject","Input","input","Common_templateObject2","Layout","styleds_templateObject","status","TickerName","styleds_templateObject2","CurrentPrice","styleds_templateObject3","PrevPrice","_templateObject4","RefreshButton","_templateObject5","RemoveButton","_templateObject6","Ticker","_this$props","this","tickerName","currPrice","prevPrice","refreshTicker","removeStock","react_default","a","createElement","styleds_Layout","undefined","onClick","Component","Controls_styleds_templateObject","InputControl","Controls_styleds_templateObject2","Controls","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","inputSymbol","event","setState","symbol","target","value","toUpperCase","state","_this2","addStock","Controls_styleds_Layout","onChange","tickers","rates","intervalTimeout","components_Controls","map","rate","components_Ticker","key","saveStore","store","console","log","localStorage","JSON","stringify","_unused","App","nextProps","setRefreshInterval","components_Layout","connect","alert","price","refreshIntervalId","clearInterval","newRefreshIntervalId","setInterval","initialState","parse","_unused2","restoreStore","AAPL","FB","SIG","BAX","FAB","arguments","action","_action$payload","findIndex","existSymbol","objectSpread","defineProperty","toConsumableArray","newSymbols","filter","newRates","forEach","latestPrice","quote","_rates2$symbol","newState","_action$payload2","_action$payload3","createStore","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.359ffe5d.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst ADD_STOCK = \"ADD_STOCK\";\nconst REMOVE_STOCK = \"REMOVE_STOCK\";\nconst REFRESH_ALL_TICKERS = \"REFRESH_ALL_TICKERS\";\nconst REFRESH_TICKER = \"REFRESH_TICKER\";\nconst SET_REFRESH_INTERVAL = \"SET_REFRESH_INTERVAL\";\n\nconst apiUrl =\n  process.env.NODE_ENV === \"development\"\n    ? process.env.REACT_APP_API_URL_DEV\n    : process.env.REACT_APP_API_URL_PROD;\n\nconst refreshAllTickers = () => (dispatch, getState) => {\n  const symbolsList = getState().symbols.join(\",\");\n\n  if (symbolsList.length !== 0) {\n    axios({\n      url: `${apiUrl}/stock/market/batch?symbols=${symbolsList}&types=quote&filter=latestPrice`,\n      method: \"get\"\n    })\n      .then(response => {\n        const { data } = response;\n\n        dispatch({ type: REFRESH_ALL_TICKERS, payload: data });\n      })\n      .catch(error => {});\n  }\n};\n\nconst refreshTicker = symbol => dispatch => {\n  axios({\n    url: `${apiUrl}/stock/${symbol}/price`,\n    method: \"get\"\n  })\n    .then(response => {\n      const { data } = response;\n\n      dispatch({ type: REFRESH_TICKER, payload: { data, symbol } });\n    })\n    .catch(error => {\n      if (error.response.status === 404) {\n        alert(\"Probably the stock is not exist.\");\n      } else {\n        alert(\"Something go wrong please retry later.\");\n      }\n    });\n};\n\nconst addStock = symbol => dispatch => {\n  axios({\n    url: `${apiUrl}/stock/${symbol}/price`,\n    method: \"get\"\n  })\n    .then(response => {\n      const { data } = response;\n\n      dispatch({ type: ADD_STOCK, payload: { symbol, price: data } });\n    })\n    .catch(error => {\n      if (error.response.status === 404) {\n        alert(\"Probably the stock is not exist.\");\n      } else {\n        alert(\"Something go wrong please retry later.\");\n      }\n    });\n};\n\nconst removeStock = symbol => ({ type: REMOVE_STOCK, payload: symbol });\n\nconst setRefreshInterval = intervalTimeout => (dispatch, getState) => {\n  const { refreshIntervalId } = getState();\n\n  if (refreshIntervalId !== undefined) clearInterval(refreshIntervalId);\n\n  const newRefreshIntervalId = setInterval(\n    () => dispatch(refreshAllTickers()),\n    intervalTimeout\n  );\n\n  dispatch({\n    type: SET_REFRESH_INTERVAL,\n    payload: { newRefreshIntervalId, intervalTimeout }\n  });\n};\n\nexport {\n  refreshAllTickers,\n  refreshTicker,\n  addStock,\n  removeStock,\n  setRefreshInterval\n};\n","import styled from \"styled-components\";\n\nconst LayoutMain = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  max-width: 768px;\n  width: 100%;\n`;\n\nconst LayoutTickers = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 8px;\n  width: 100%;\n`;\n\nconst RefreshIndicator = styled.div`\n  position: fixed;\n  right: 24px;\n  top: 24px;\n  border: 2px solid rgba(0, 0, 0, 0.3);\n  width: 48px;\n  height: 48px;\n  border-radius: 50%;\n  animation: ${props => props.refreshInterval}ms init infinite;\n`;\n\nexport { LayoutMain, LayoutTickers, RefreshIndicator };\n","import styled from \"styled-components\";\n\nconst Button = styled.button`\n  font-size: 20px;\n  border: none;\n  border-radius: 8px;\n  min-width: 150px;\n  cursor: pointer;\n  padding: 16px;\n  text-align: center;\n  background: rgba(0, 0, 0, 0.7);\n  color: #fff;\n  font-weight: 700;\n  transition: background 0.3s;\n  border: 2px solid rgba(0, 0, 0, 0.7);\n\n  &:hover {\n    background: rgba(0, 0, 0, 0.5);\n  }\n`;\n\nconst Input = styled.input`\n  border: 2px solid rgba(0, 0, 0, 0.7);\n  border-radius: 8px;\n  padding: 8px;\n  font-weight: 700;\n  font-size: 20px;\n  width: 100%;\n`;\n\nexport { Button, Input };\n","import styled from \"styled-components\";\nimport { Button } from \"../Common\";\n\nconst Layout = styled.div`\n  display: flex;\n  flex-direction: column;\n  font-size: 24px;\n  border-radius: 8px;\n  border: 2px solid #333;\n  padding: 8px;\n  animation: ${props => props.status} 0.3s;\n  margin-top: 16px;\n  position: relative;\n\n  @keyframes init {\n    0% {\n      background: rgba(0, 0, 0, 0.5);\n    }\n\n    100% {\n      background: #fff;\n    }\n  }\n\n  @keyframes up {\n    0% {\n      background: rgba(0, 255, 0, 0.3);\n    }\n\n    100% {\n      background: #fff;\n    }\n  }\n\n  @keyframes down {\n    0% {\n      background: rgba(255, 0, 0, 0.3);\n    }\n\n    100% {\n      background: #fff;\n    }\n  }\n`;\n\nconst TickerName = styled.div`\n  font-size: 36px;\n  font-weight: 700;\n`;\n\nconst CurrentPrice = styled.div`\n  margin-top: 16px;\n  font-weight: 700;\n`;\n\nconst PrevPrice = styled.div`\n  font-size: 18px;\n  margin-top: 8px;\n  margin-bottom: 16px;\n  font-weight: 300;\n  opacity: 0.5;\n`;\n\nconst RefreshButton = styled(Button)`\n  margin-top: auto;\n  width: 100%;\n  min-width: initial;\n`;\n\nconst RemoveButton = styled.div`\n  position: absolute;\n  top: 16px;\n  right: 8px;\n  width: 16px;\n  height: 16px;\n\n  &::before,\n  &::after {\n    content: \"\";\n    position: absolute;\n    height: 2px;\n    width: 16px;\n    top: 50%;\n    left: 0;\n    margin-top: -1px;\n    background: #000;\n  }\n\n  &::before {\n    transform: rotate(45deg);\n  }\n\n  &::after {\n    transform: rotate(-45deg);\n  }\n`;\n\nexport {\n  Layout,\n  TickerName,\n  CurrentPrice,\n  PrevPrice,\n  RefreshButton,\n  RemoveButton\n};\n","import React, { Component } from \"react\";\nimport {\n  Layout,\n  TickerName,\n  CurrentPrice,\n  PrevPrice,\n  RefreshButton,\n  RemoveButton\n} from \"./styleds\";\n\nclass Ticker extends Component {\n  render() {\n    const {\n      tickerName,\n      currPrice,\n      prevPrice,\n      refreshTicker,\n      removeStock\n    } = this.props;\n\n    return (\n      <Layout\n        status={\n          prevPrice === undefined || prevPrice === currPrice\n            ? \"init\"\n            : currPrice > prevPrice\n            ? \"up\"\n            : \"down\"\n        }\n      >\n        <TickerName>{tickerName}</TickerName>\n        <CurrentPrice>{currPrice}</CurrentPrice>\n        <PrevPrice>{prevPrice}</PrevPrice>\n        <RefreshButton onClick={() => refreshTicker(tickerName)}>\n          Refresh\n        </RefreshButton>\n        <RemoveButton onClick={() => removeStock(tickerName)} />\n      </Layout>\n    );\n  }\n}\n\nexport default Ticker;\n","import styled from \"styled-components\";\nimport { Input } from \"../Common\";\n\nconst Layout = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  padding: 8px;\n  padding-bottom: 32px;\n`;\n\nconst InputControl = styled(Input)`\n  max-width: 150px;\n  margin-right: 16px;\n  padding: 16px;\n  text-align: center;\n`;\n\nexport { Layout, InputControl };\n","import React, { Component } from \"react\";\nimport { Layout, InputControl } from \"./styleds\";\nimport { Button } from \"../Common\";\n\nclass Controls extends Component {\n  constructor() {\n    super();\n\n    this.state = { symbol: \"\" };\n  }\n\n  inputSymbol = event => {\n    this.setState({ symbol: event.target.value.toUpperCase() });\n  };\n\n  render() {\n    const { inputSymbol, state } = this;\n    const { addStock } = this.props;\n\n    return (\n      <Layout>\n        <InputControl onChange={inputSymbol} value={state.symbol} />\n        <Button\n          onClick={() => {\n            addStock(state.symbol);\n            this.setState({ symbol: \"\" });\n          }}\n        >\n          Add ticker\n        </Button>\n      </Layout>\n    );\n  }\n}\n\nexport default Controls;\n","import React, { Component } from \"react\";\n\nimport { LayoutMain, LayoutTickers, RefreshIndicator } from \"./styleds\";\nimport Ticker from \"../Ticker\";\nimport Controls from \"../Controls\";\n\nclass Layout extends Component {\n  render() {\n    const { tickers, refreshTicker, addStock, removeStock } = this.props;\n    const { rates, symbols, intervalTimeout } = tickers;\n\n    return (\n      <LayoutMain>\n        <Controls addStock={addStock} />\n        <LayoutTickers>\n          {symbols.map(symbol => {\n            const rate = rates[symbol];\n\n            return (\n              <Ticker\n                key={symbol}\n                tickerName={symbol}\n                prevPrice={rate.prevPrice}\n                currPrice={rate.currPrice}\n                refreshTicker={refreshTicker}\n                removeStock={removeStock}\n              />\n            );\n          })}\n        </LayoutTickers>\n        <RefreshIndicator refreshInterval={intervalTimeout} />\n      </LayoutMain>\n    );\n  }\n}\n\nexport default Layout;\n","// Some browser doesn't support localStorage so i use try/catch wrapper\n\nconst saveStore = store => {\n  try {\n    console.log(store);\n    localStorage.store = JSON.stringify(store);\n  } catch {\n    console.log(\"The browser doesn't support save function.\");\n  }\n};\n\nconst restoreStore = store => {\n  try {\n    return localStorage.store ? JSON.parse(localStorage.store) : false;\n  } catch {\n    return false;\n  }\n};\n\nexport { saveStore, restoreStore };\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport {\n  refreshAllTickers,\n  refreshTicker,\n  addStock,\n  removeStock,\n  setRefreshInterval\n} from \"./store/actions\";\n\nimport Layout from \"./components/Layout\";\nimport { saveStore } from \"./utils/storeSaving\";\n\nclass App extends Component {\n  componentWillUpdate(nextProps) {\n    saveStore(nextProps.tickers);\n  }\n\n  componentDidMount() {\n    this.props.setRefreshInterval(2500);\n  }\n\n  render() {\n    return <Layout {...this.props} />;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    tickers: state\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  {\n    refreshAllTickers,\n    refreshTicker,\n    addStock,\n    removeStock,\n    setRefreshInterval\n  }\n)(App);\n","import { restoreStore, saveStore } from \"../../utils/storeSaving\";\n\nconst initialState = restoreStore() || {\n  rates: {\n    AAPL: {},\n    FB: {},\n    SIG: {},\n    BAX: {},\n    FAB: {}\n  },\n  symbols: [\"AAPL\", \"FB\", \"SIG\", \"BAX\", \"FAB\"]\n};\n\nfunction tickers(state = initialState, action) {\n  switch (action.type) {\n    case \"ADD_STOCK\": {\n      const { symbol, price } = action.payload;\n      const { rates, symbols } = state;\n\n      return symbols.findIndex(existSymbol => existSymbol === symbol) === -1\n        ? {\n            ...state,\n            rates: {\n              ...rates,\n              [symbol]: {\n                currPrice: price\n              }\n            },\n            symbols: [...symbols, symbol]\n          }\n        : state;\n    }\n\n    case \"REMOVE_STOCK\": {\n      const { payload } = action;\n      const { rates, symbols } = state;\n\n      const newSymbols = symbols.filter(symbol => symbol !== payload);\n\n      let newRates = {};\n\n      newSymbols.forEach(symbol => {\n        newRates[symbol] = rates[symbol];\n      });\n\n      return {\n        ...state,\n        rates: newRates,\n        symbols: newSymbols\n      };\n    }\n\n    case \"REFRESH_ALL_TICKERS\": {\n      const { payload } = action;\n      const { symbols, rates } = state;\n\n      let newRates = {};\n\n      symbols.forEach(symbol => {\n        const { latestPrice } = payload[symbol].quote;\n        const { currPrice, prevPrice } = rates[symbol];\n\n        newRates[symbol] = {\n          prevPrice: currPrice !== latestPrice ? currPrice : prevPrice,\n          currPrice: latestPrice\n        };\n      });\n\n      const newState = {\n        ...state,\n        rates: newRates\n      };\n\n      saveStore(newState);\n\n      return newState;\n    }\n\n    case \"REFRESH_TICKER\": {\n      const { symbol, data } = action.payload;\n      const { rates } = state;\n\n      return {\n        ...state,\n        rates: {\n          ...rates,\n          [symbol]: {\n            symbol,\n            prevPrice:\n              rates[symbol].currPrice !== data\n                ? rates[symbol].currPrice\n                : rates[symbol].prevPrice,\n            currPrice: data\n          }\n        }\n      };\n    }\n\n    case \"SET_REFRESH_INTERVAL\": {\n      const { newRefreshIntervalId, intervalTimeout } = action.payload;\n\n      return {\n        ...state,\n        refreshIntervalId: newRefreshIntervalId,\n        intervalTimeout: intervalTimeout\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport default tickers;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport tickers from \"./reducers\";\n\nconst store = createStore(tickers, applyMiddleware(thunk));\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport store from \"./store\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}